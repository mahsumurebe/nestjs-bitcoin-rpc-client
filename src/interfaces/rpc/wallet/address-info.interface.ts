import { TYPE_SCRIPT_TYPES } from '../../../types';

export interface AddressInfoInterface {
  /**
   * The bitcoin address validated.
   *
   * @type {string}
   */
  address: string;
  /**
   * The hex-encoded scriptPubKey generated by the address.
   *
   * @type {string}
   */
  scriptPubKey: string;
  /**
   * If the address is yours.
   *
   * @type {boolean}
   */
  ismine: boolean;
  /**
   * If the address is watchonly.
   *
   * @type {boolean}
   */
  iswatchonly: boolean;
  /**
   * If we know how to spend coins sent to this address, ignoring the possible lack of private keys.
   *
   * @type {boolean}
   */
  solvable: boolean;
  /**
   * A descriptor for spending coins sent to this address (only when solvable).
   *
   * @type {string}
   */
  desc?: string;
  /**
   * If the key is a script.
   *
   * @type {boolean}
   */
  isscript: boolean;
  /**
   * If the address was used for change output.
   *
   * @type {boolean}
   */
  ischange: boolean;
  /**
   * If the address is a witness address.
   *
   * @type {boolean}
   */
  iswitness: boolean;
  /**
   * The version number of the witness program.
   *
   * @type {number}
   */
  witness_version?: number;
  /**
   * The hex value of the witness program.
   *
   * @type {string}
   */
  witness_program?: string;
  /**
   * The output script type. Only if isscript is true and the redeemscript is known.
   *
   * @type {string}
   */
  script?: TYPE_SCRIPT_TYPES;
  /**
   * The redeemscript for the p2sh address.
   *
   * @type {string}
   */
  hex?: string;
  /**
   * Array of pubkeys associated with the known redeemscript (only if script is multisig).
   *
   * @type {string[]}
   */
  pubkeys?: string[];
  /**
   * The number of signatures required to spend multisig output (only if script is multisig).
   *
   * @type {number}
   */
  sigsrequired?: number;
  /**
   * The hex value of the raw public key for single-key addresses (possibly embedded in
   * P2SH or P2WSH).
   *
   * @type {string}
   */
  pubkey?: string;
  /**
   * Information about the address embedded in P2SH or P2WSH, if relevant and known.
   *
   * Includes all getaddressinfo output fields for the embedded address, excluding metadata
   * (timestamp, hdkeypath, hdseedid) and relation to the wallet (ismine, iswatchonly).
   *
   * @type {object}
   */
  embedded?: Omit<
    Omit<
      Omit<
        Omit<Omit<AddressInfoInterface, 'timestamp'>, 'hdkeypath'>,
        'hdseedid'
      >,
      'ismine'
    >,
    'iswatchonly'
  >;
  /**
   * If the pubkey is compressed.
   *
   * @type {boolean}
   */
  iscompressed?: boolean;
  /**
   * The creation time of the key, if available, expressed in UNIX epoch time.
   *
   * @type {number}
   */
  timestamp?: number;
  /**
   * The HD keypath, if the key is HD and available.
   *
   * @type {string}
   */
  hdkeypath?: string;
  /**
   * The Hash160 of the HD seed.
   *
   * @type {string}
   */
  hdseedid?: string;
  /**
   * The fingerprint of the master key.
   *
   * @type {string}
   */
  hdmasterfingerprint?: string;
  /**
   * Array of labels associated with the address. Currently limited to one label
   * but returned as an array to keep the API stable if multiple labels are enabled
   * in the future.
   *
   * @type {string[]}
   * @default [""]
   */
  labels: [];
}
